import os
import re
import shutil
from typing import Dict, List, Optional

import numpy as np
from openai import OpenAI
from agent.base_agent import BaseAgent, Controller, Task
from core.utils import get_error_info
from env.base_meta_env import BaseMetaEnv, Observation, Action, InfoDict
from abc import ABC, abstractmethod
import enum
import random
from typing import Any, Dict, Tuple, Union


class LLMBasedHierarchicalControllerGenerator(BaseAgent):

    def __init__(self, config: Dict):
        super().__init__(config)
        # Initialize OpenAI API
        self.client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])
        # Extract the configuration parameters
        self.model = config.get("model", "gpt-4o-mini")
        self.num_attempts_sc = config.get("num_attempts_sc", 5)
        # Initialize agent's variables
        self.t = 0  # Time step
        self.namespace = {}  # Dictionary to store dynamically created variables
        self.sc_code_last: Optional[str] = (
            None  # The code of the controller generated by the assistant
        )

    def give_textual_description(self, description: str):
        self.description_env = description
        self.text_controller_base_class = open("agent/base_controller.py").read()
        self.text_agent_answer_example = open("assets/agent_answer_example.txt").read()

    def get_controller(self, task: Task) -> Controller:

        # For now, the LLM-based hierarchical controller only supports string tasks
        assert isinstance(
            task, str
        ), "For now, the LLM-based hierarchical controller only supports string tasks."

        # Create tge prompt for the assistant
        messages = []
        messages.append(
            {
                "role": "system",
                "content": (
                    "You will be asked to generate the code for a Controller for a given task in a RL-like environment. "
                    "The general description of the environment is the following:\n\n"
                    "[--- General description of the environment ---]\n"
                    f"{self.description_env}\n"
                    "[--- End of the general description of the environment ---]\n\n"
                    "A controller obeys the following interface:\n"
                    "```python\n"
                    f"{self.text_controller_base_class}"
                    "```\n\n"
                    "This can be a very hard task at the beginning since you have very little information about the environment and it's structure. "
                    "That is why you have at your disposal:\n"
                    "1) A library of controllers that you can reuse to solve the task.\n"
                    "2) A library of logical functions that you can reuse to generate new controllers.\n"
                    "3) A directory of hypothesis and knowledges that you have already on the environment and that were generated by previous interactions with the environment.\n"
                    "To use them, simply call the controller classes or the functions in your generated code. The hypothesis and knowledges can help you make exploitative or explorative decisions. \n\n"
                    "Please reason step-by-step and think about the best way to solve the task before answering. "
                    "Globally, your answer should be returned following that example:\n\n"
                    "[--- Example of answer ---]\n"
                    f"{self.text_agent_answer_example}"
                    "[--- End of example of answer ---]\n\n"
                    f"You will have to implement a controller (under the variable 'controller') to solve the following task : {task}.\n\n"
                ),
            }
        )

        # Breakpoint-pause at each task if the debug mode is activated
        if self.config["config_debug"]["breakpoint_on_new_t"]:
            print(f"Task {self.t} : {task}. Press 'c' to continue.")
            breakpoint()

        # Iterate until the controller is generated. If error, log it in the message and ask the assistant to try again.
        is_controller_instance_generated = False
        for no_attempt in range(self.num_attempts_sc):
            # Ask the assistant
            answer_assistant = (
                self.client.chat.completions.create(
                    model=self.model,
                    messages=messages,
                )
                .choices[0]
                .message.content
            )
            messages.append({"role": "assistant", "content": answer_assistant})
            # Extract the code block from the answer
            sc_code = self.extract_SC_code(answer_assistant)
            if sc_code is None:
                print(
                    f"WARNING : Could not extract the code from the answer. Asking the assistant to try again."
                )
                messages.append(
                    {
                        "role": "system",
                        "content": "I'm sorry, I could not extract the code from your answer. Please try again and make sure the code obeys the following format:\n```python\n<your code here>\n```",
                    }
                )
                if self.config["config_debug"]["input_on_agent_mistake"]:
                    input("Continue ? ...")
                continue
            # Execute the controller code and retrieve the controller instance
            try:
                exec(sc_code, globals(), self.namespace)
                assert (
                    "controller" in self.namespace
                ), "The controller variable was not defined in the code."
                controller_instance = self.namespace.get("controller")
            except Exception as e:
                full_error_info = get_error_info(e)
                print(
                    f"WARNING : Could not execute the code from the answer. Asking the assistant to try again. Full error info : {full_error_info}"
                )
                messages.append(
                    {
                        "role": "system",
                        "content": f"I'm sorry, an error occured while executing your code. Please try again and make sure the code is correct. Full error info : {full_error_info}",
                    }
                )
                if self.config["config_debug"]["input_on_agent_mistake"]:
                    input("Continue ? ...")
                continue
            # Save the code for update step and return the controller instance
            self.sc_code_last = sc_code
            is_controller_instance_generated = True
            break

        if is_controller_instance_generated:
            config_logs = self.config["config_logs"]
            dir_logs = config_logs["dir_logs"]
            list_run_names = []
            if config_logs["do_log_on_new"]:
                list_run_names.append(self.config["run_name"])
            if config_logs["do_log_on_last"]:
                list_run_names.append("last")
            for run_name in list_run_names:
                path_task_t = os.path.join(dir_logs, run_name, f"task_{self.t}")
                self.log_texts(
                    dir_logs=path_task_t,
                    name_to_text={
                        "prompt.txt": messages[0]["content"],
                        "assistant_answer.txt": messages[-1]["content"],
                        "controller.py": sc_code,
                    },
                )
            return controller_instance

        else:
            raise ValueError(
                f"Could not generate a controller after {self.num_attempts_sc} attempts. Stopping the process."
            )

    def update(
        self, task: Task, controller: Controller, feedback: Dict[str, Union[float, str]]
    ):
        pass  # TODO : implement the update method
        self.t += 1

    # ================ Helper functions ================

    def extract_SC_code(self, answer: str) -> str:
        """Extracts the controller definition and instantiation code from an LLM response.
        The answer should contain one python code block with the controller code and instanciate a Controller variable named 'controller'.

        Args:
            answer (str): the answer from the LLM.

        Returns:
            str: the controller code.
        """
        sc_match = re.search(r"```python\n(.*?)\n```", answer, re.DOTALL)
        sc_code = sc_match.group(1).strip() if sc_match else None
        return sc_code

    def log_texts(
        self,
        dir_logs: str,
        name_to_text: Dict[str, str],
    ):
        """Log texts in a directory. For each (key, value) in the directory, the file "dir_log/key" will contain the value.
        Remove the directory if it already exists.

        Args:
            dir_logs (str): _description_
            name_to_text (Dict[str, str]): a dictionnary containing the name of the file to create and the text to write in it.
        """
        shutil.rmtree(dir_logs, ignore_errors=True)
        os.makedirs(dir_logs, exist_ok=True)
        for name, text in name_to_text.items():
            with open(os.path.join(dir_logs, name), "w") as f:
                f.write(text)
